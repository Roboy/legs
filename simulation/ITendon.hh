#ifndef _GAZEBO_MUSCLE_HH_
#define _GAZEBO_MUSCLE_HH_

#include "gazebo/common/Plugin.hh"
#include "gazebo/util/system.hh"
#include <sstream>
#include <gazebo/gazebo.hh>
#include <gazebo/physics/physics.hh>
#include <ignition/math/Vector3.hh>
#include <gazebo/common/common.hh>
#include <boost/bind.hpp>
#include <math.h>
#include <map>
#include <stdio.h>
#include <algorithm> 
#include <boost/numeric/odeint.hpp>

#include "Helpers.hh"

// namespace gazebo
// {
  
	using namespace std;
	using namespace boost::numeric::odeint; 
	
	class ITendon
 	{
	    
 		public: ITendon();
	    ////////////////////////////////////////
	    /// \brief Calculate the dot product between two vectors
	    /// \param[in] _v1 vector 1 coordinates
	    /// \param[in] _v2 vector 2 coordinates
	    /// \return Dot product
	    private: float DotProduct(const math::Vector3 &_v1, const math::Vector3 &_v2);

	    ////////////////////////////////////////
	    /// \brief Calculate the angle between two vectors
	    /// \param[in] _v1 vector 1 coordinates
	    /// \param[in] _v2 vector 2 coordinates
	    /// \return Angle between two vectors in radians
	    private: float Angle(const math::Vector3 &_v1, const math::Vector3 &_v2);

	    ////////////////////////////////////////
	    /// \brief Calculate torque for an electric motor model.
	    /// \param[in] _current Input electric current
	    /// \param[in] _torqueConstant Motor's torque constant
	    /// \param[in] _spindleRadius Radius of the spindle that coils up the tendon
	    /// \return Calculated force according to the model
	    public: float ElectricMotorModel(const float _current,  const float _torqueConstant, 
	                                const float _spindleRadius);

	    ////////////////////////////////////////
	    /// \brief Calculate elastic force of the series elastic element
	    /// \param[in] _length0 Resting length of the SEE
	    /// \param[in] _length Current length of the SEE 
	    /// \param[in] _stiffness Deafault values for stiffness of the SEE
	    /// \return Elastic force in N
	    public: float ElasticElementModel(const float _length0, const float _length, 
	                                float _stiffness,  const float _speed, 
	                                const float _spindleRadius, const double _time);

	    ////////////////////////////////////////
	    /// \brief Calculate forces generated by the motor and SEE
	    /// \param[in] _elasticForce
	    /// \param[in] _motorForce  
	    /// \param[in] position and orientation of the tendon
	    /// \return Motor force in N
	    public: math::Vector3 CalculateForce(float _elasticForce, float _motorForce, 
                              const math::Vector3 &_tendonOrien);



    	public: static void GetTendonInfo(vector<vector<math::Vector3>> _viaPointPose, vector<tendonType> *tendon_p);

    }; 
}

#endif